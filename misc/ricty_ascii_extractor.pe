#!/usr/local/bin/fontforge -script

#
# Ricty ASCII Extractor
#
# Copyright (c) 2011-2014, Yasunori Yusa <yusa at save.sys.t.u-tokyo.ac.jp>
# All rights reserved.
#
# This script is to extracting ASCII charactors from Ricty.
# If the window width of Cocoa Emacs is twice as large as expected,
# you can use this script and write configuration file as following.
#
# (set-face-attribute 'default nil
#                     :family "Ricty Discord Ascii"
#                     :height 140)
# (set-fontset-font (frame-parameter nil 'font)
#                   'japanese-jisx0208
#                   '("Ricty Discord" . "iso10646-1"))
#
# Usage:
usage = "Usage: ricty_ascii_extractor.pe fontfamily-fontstyle.ttf ..."
#

# Check args
if ($argc == 1)
    Print(usage)
    Quit()
endif

# Begin loop in args
i = 1
while (i < $argc)

########################################
# Set variables
########################################

# Get args
input_ttf  = $argv[i]
input      = input_ttf:t:r
if (input_ttf:t:e != "ttf")
    Print("Usage: ricty_ascii_extractor.pe fontfamily-fontstyle.ttf")
    Quit()
endif

# Get font names
hyphen_idx = Strrstr(input, '-')
if (hyphen_idx == -1)
    Print("Usage: ricty_ascii_extractor.pe fontfamily-fontstyle.ttf")
    Quit()
endif
inputfamily = Strsub(input, 0, hyphen_idx)
inputstyle  = Strsub(input, hyphen_idx+1)
addfamily   = "Ascii"

########################################
# Open and set configs
########################################

# Open
Open(input_ttf)

# Set encoding to Unicode-bmp
Reencode("unicode")

# Set configs
SetFontNames(inputfamily + addfamily + "-" + inputstyle, \
             $familyname + " " + addfamily, \
             $familyname + " " + addfamily + " " + inputstyle, \
             inputstyle)
SetTTFName(0x409, 3, "FontForge 2.0 : " + $fullname + " : " + Strftime("%d-%m-%Y", 0))

# These hard-coded lines should be removed...
SetOS2Value("WinAscentIsOffset",       0)
SetOS2Value("WinDescentIsOffset",      0)
SetOS2Value("TypoAscentIsOffset",      0)
SetOS2Value("TypoDescentIsOffset",     0)
SetOS2Value("HHeadAscentIsOffset",     0)
SetOS2Value("HHeadDescentIsOffset",    0)
SetOS2Value("WinAscent",             815)
SetOS2Value("WinDescent",            215)
SetOS2Value("TypoAscent",            860)
SetOS2Value("TypoDescent",          -140)
SetOS2Value("TypoLineGap",             0)
SetOS2Value("HHeadAscent",           815)
SetOS2Value("HHeadDescent",         -215)

########################################
# Remove except ascii glyphs
########################################

# Set ascii glyphs list
ascii_list = [ \
    0u0020, 0u0021, 0u0022, 0u0023, 0u0024, \
    0u0025, 0u0026, 0u0027, 0u0028, 0u0029, \
    0u002A, 0u002B, 0u002C, 0u002D, 0u002E, 0u002F, \
    0u0030, 0u0031, 0u0032, 0u0033, 0u0034, \
    0u0035, 0u0036, 0u0037, 0u0038, 0u0039, \
    0u003A, 0u003B, 0u003C, 0u003D, 0u003E, 0u003F, \
    0u0040, 0u0041, 0u0042, 0u0043, 0u0044, \
    0u0045, 0u0046, 0u0047, 0u0048, 0u0049, \
    0u004A, 0u004B, 0u004C, 0u004D, 0u004E, 0u004F, \
    0u0050, 0u0051, 0u0052, 0u0053, 0u0054, \
    0u0055, 0u0056, 0u0057, 0u0058, 0u0059, \
    0u005A, 0u005B, 0u005C, 0u005D, 0u005E, 0u005F, \
    0u0060, 0u0061, 0u0062, 0u0063, 0u0064, \
    0u0065, 0u0066, 0u0067, 0u0068, 0u0069, \
    0u006A, 0u006B, 0u006C, 0u006D, 0u006E, 0u006F, \
    0u0070, 0u0071, 0u0072, 0u0073, 0u0074, \
    0u0075, 0u0076, 0u0077, 0u0078, 0u0079, \
    0u007A, 0u007B, 0u007C, 0u007D, 0u007E ]

# Remove glyphs
SelectNone()
j = 0; while (j < SizeOf(ascii_list))
    SelectMore(ascii_list[j])
j += 1; endloop
SelectInvert()
Clear()

########################################
# Generate
########################################

Generate(inputfamily + addfamily + "-" + inputstyle + ".ttf", "", 0x84)
Print("Generated " + inputfamily + addfamily + "-" + inputstyle + ".ttf")
Close()

# End loop
i += 1; endloop
Quit()
